# 100-matrix_mul.txt
==========================

>>> import sys
>>> sys.path.insert(1, '../')
>>> lib = __import__("100-matrix_mul")
>>> m_mul = lib.matrix_mul

>>> m_a = [[1, 2],[3, 4]]
>>> m_b = m_a
>>> m_mul(m_a, m_b)
[[7, 10], [15, 22]]

>>> m_a = [[1, 2]]
>>> m_b = [[3, 4], [5, 6]]
>>> m_mul(m_a, m_b)
[[13, 16]]

The function also works with floating-point numbers.
>>> m_a = [[1.2, 5.5, 6.2], [4.66, 12.3, -9.2]]
>>> m_b = [[5.0, 3.3], [-2.9, 4.4], [7.2, 4.4]]
>>> m_mul(m_a, m_b)
[[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]

Integers and floats can be combined

>>> m_a = [[1, 2.2, 3.3, 4], [5, 6, 7, 8.8]]
>>> m_b = [[1.1, 2, 3.3], [4.0, 5.5, 6], [7, 8, 9], [10.01, 11, 12.3]]

>>> m_mul(m_a, m_b)
[[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

A minimum of two arguments must be provided. Otherwise, a TypeError is rai


>>> m_mul()
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


If two matrices cannot be multiplied (ie. the row count of ``m_a`` is not
equal to the column count in ``m_b``), a ValueError is raised.

>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [2, 3], [4, 5]]
>>> m_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied


The parameters ``m_a`` and ``m_b`` cannot be empty. Otherwise, a ValueError
is raised.

>>> m_mul([], [[1, 2]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> m_mul([[1, 2]], [[]])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

>>> m_mul([[]], [])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

Invalid Matrices
================

The parameters ``m_a`` and ``m_b`` must be lists. If either parameter is
not a list, a TypeError is raised.

>>> m_mul("not a list", [[1, 2]])
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> m_mul([[1, 2]], "also not a list")
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> m_mul("not a list", "also not a list")
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> m_mul(None, None)
Traceback (most recent call last):
...
TypeError: m_a must be a list

Not just any list - they *must* be lists of lists!


>>> m_mul([1, 2], [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

>>> m_mul([[1, 2]], [3, 4])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists


>>> m_mul([1, 2], [3, 4])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

And not just any list of lists - they *must* be lists of lists containing
integers or floats!


>>> m_mul([[1, "non-number"]], [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats


>>> m_mul([[1, 2]], [[{"a": 1}, 8.8]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

>>> m_mul([[1, "non-number"]], [[{"a": 1}, 8.8]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

Finally, the length of all rows in matrices ``m_a`` and ``m_b`` should be
equivalent. Otherwise, a TypeError is raised.


>>> m_a = [[1, 2], [3, 4, 5]]
>>> m_b = [[1, 2], [3, 4]]
>>> m_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size


>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4, 5]]
>>> m_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size


>>> m_a = [[1, 2], [3, 4, 5]]
>>> m_b = m_a

>>> m_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size
